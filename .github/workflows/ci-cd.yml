name: PetPal CI/CD - Minimal

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: petpal

jobs:
  test-user-service:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd services/user-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests with coverage
      run: |
        cd services/user-service
        pytest tests/ --cov=. --cov-report=xml
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_NAME: petpal_test_user
        JWT_SECRET: test_secret

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./services/user-service/coverage.xml
        flags: user-service
        name: codecov-user-service

  build-and-push-user:
    needs: test-user-service
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push user-service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/user-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/user-service:latest

  integration-tests:
    needs: build-and-push-user
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests pytest pytest-html

    - name: Wait for staging services
      run: sleep 60

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --html=integration-report.html --self-contained-html
      env:
        STAGING_BASE_URL: ${{ secrets.STAGING_BASE_URL }}

    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-report
        path: integration-report.html

  e2e-tests:
    needs: build-and-push-user
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Playwright
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Wait for production services
      run: sleep 120

    - name: Run E2E tests
      run: npx playwright test
      env:
        PRODUCTION_BASE_URL: ${{ secrets.PRODUCTION_BASE_URL }}

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/
