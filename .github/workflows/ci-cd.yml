name: PetPal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: petpal
  MONGODB_VERSION: '7.0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, pet-service, appointment-service, medical-service]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: testpassword
          MONGO_INITDB_DATABASE: petpal_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
    
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio motor pymongo
    
    - name: Wait for MongoDB
      run: |
        timeout 60s bash -c 'until mongosh --host localhost:27017 --username root --password testpassword --authenticationDatabase admin --eval "db.adminCommand(\"ismaster\")" >/dev/null 2>&1; do sleep 1; done'
    
    - name: Setup test databases
      run: |
        mongosh --host localhost:27017 --username root --password testpassword --authenticationDatabase admin --eval "
          use petpal_test_${{ matrix.service }};
          db.createUser({
            user: 'testuser',
            pwd: 'testpass',
            roles: [{ role: 'readWrite', db: 'petpal_test_${{ matrix.service }}' }]
          });
        "
    
    - name: Run database migrations
      run: |
        cd services/${{ matrix.service }}
        if [ -f "scripts/migrate.py" ]; then
          python scripts/migrate.py
        fi
      env:
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/petpal_test_${{ matrix.service }}
        DATABASE_NAME: petpal_test_${{ matrix.service }}
        ENVIRONMENT: test
    
    - name: Run tests with coverage
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
      env:
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/petpal_test_${{ matrix.service }}
        DATABASE_NAME: petpal_test_${{ matrix.service }}
        JWT_SECRET: test_secret_key_for_testing_only
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379/0
    
    - name: Run database cleanup tests
      run: |
        cd services/${{ matrix.service }}
        if [ -f "tests/test_db_cleanup.py" ]; then
          python -m pytest tests/test_db_cleanup.py -v
        fi
      env:
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/petpal_test_${{ matrix.service }}
        DATABASE_NAME: petpal_test_${{ matrix.service }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: codecov-${{ matrix.service }}
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
    
    - name: Run flake8
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "*/migrations/*" | xargs flake8 --max-line-length=100 --ignore=E203,W503
    
    - name: Run black
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs black --check --line-length=100
    
    - name: Run isort
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs isort --check-only
    
    - name: Run mypy type checking
      run: |
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs mypy --ignore-missing-imports
    
    - name: Run bandit security check
      run: |
        bandit -r . -x ./venv,./test* -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  database-migration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Test database migrations
      run: |
        echo "Testing database migrations..."
        # This would connect to a staging MongoDB Atlas instance
        # to test migrations safely
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, lint, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [user-service, pet-service, appointment-service, medical-service, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || format('./services/{0}', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  deploy-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Run pre-deployment database migrations
      run: |
        echo "Running staging database migrations..."
        # Install Python dependencies for migration
        python -m pip install --upgrade pip
        pip install pymongo motor
        
        # Run migrations for each service
        for service in user-service pet-service appointment-service medical-service; do
          if [ -f "services/$service/scripts/migrate.py" ]; then
            echo "Running migrations for $service..."
            cd "services/$service"
            python scripts/migrate.py
            cd ../..
          fi
        done
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
        ENVIRONMENT: staging
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        echo "Deploying to staging environment..."
        # Update image tags in manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/staging/*.yaml
        kubectl apply -f kubernetes/staging/ --namespace=petpal-staging
        kubectl rollout status deployment --namespace=petpal-staging --timeout=300s
    
    - name: Verify database connectivity in staging
      run: |
        echo "Verifying database connectivity..."
        python3 -c "
        import pymongo
        import os
        try:
            client = pymongo.MongoClient(os.environ['MONGODB_URI'])
            client.admin.command('ismaster')
            print('✅ Staging database connection successful')
        except Exception as e:
            print(f'❌ Staging database connection failed: {e}')
            exit(1)
        finally:
            client.close()
        "
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
    
    - name: Cleanup
      if: always()
      run: rm -f kubeconfig

  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Create database backup before deployment
      run: |
        echo "Creating database backup before production deployment..."
        python3 -c "
        import pymongo
        import os
        from datetime import datetime
        
        client = pymongo.MongoClient(os.environ['MONGODB_URI'])
        
        # Log backup creation (actual backup would use MongoDB Atlas backup API)
        print(f'📦 Database backup initiated at {datetime.now().isoformat()}')
        print('Backup creation logged for audit trail')
        
        client.close()
        "
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_PRODUCTION }}
    
    - name: Run production database migrations
      run: |
        echo "Running production database migrations..."
        python -m pip install --upgrade pip
        pip install pymongo motor
        
        for service in user-service pet-service appointment-service medical-service; do
          if [ -f "services/$service/scripts/migrate.py" ]; then
            echo "Running production migrations for $service..."
            cd "services/$service"
            python scripts/migrate.py
            cd ../..
          fi
        done
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_PRODUCTION }}
        ENVIRONMENT: production
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        echo "Deploying to production environment..."
        # Update image tags in manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/production/*.yaml
        kubectl apply -f kubernetes/production/ --namespace=petpal
        kubectl rollout status deployment --namespace=petpal --timeout=600s
    
    - name: Verify production database connectivity
      run: |
        echo "Verifying production database connectivity..."
        python3 -c "
        import pymongo
        import os
        try:
            client = pymongo.MongoClient(os.environ['MONGODB_URI'])
            client.admin.command('ismaster')
            
            # Test basic operations on each service database
            databases = ['petpal_users', 'petpal_pets', 'petpal_appointments', 'petpal_medical']
            for db_name in databases:
                db = client[db_name]
                db.health_check.insert_one({'timestamp': 'test', 'status': 'ok'})
                db.health_check.delete_one({'timestamp': 'test'})
            
            print('✅ Production database connection and operations successful')
        except Exception as e:
            print(f'❌ Production database verification failed: {e}')
            exit(1)
        finally:
            client.close()
        "
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_PRODUCTION }}
    
    - name: Cleanup
      if: always()
      run: rm -f kubeconfig

  integration-tests:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest pytest-html pymongo motor
    
    - name: Wait for staging deployment
      run: |
        echo "Waiting for staging services to be ready..."
        sleep 60
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --html=integration-report.html --self-contained-html
      env:
        STAGING_BASE_URL: ${{ secrets.STAGING_BASE_URL }}
        MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
    
    - name: Upload integration test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-report
        path: integration-report.html

  e2e-tests:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Playwright
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Wait for production deployment
      run: |
        echo "Waiting for production services to be ready..."
        sleep 120
    
    - name: Run E2E tests
      run: |
        npx playwright test
      env:
        PRODUCTION_BASE_URL: ${{ secrets.PRODUCTION_BASE_URL }}
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/

  database-health-check:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Comprehensive database health check
      run: |
        python3 -c "
        import pymongo
        import os
        from datetime import datetime, timedelta
        
        client = pymongo.MongoClient(os.environ['MONGODB_URI'])
        
        try:
            # Check connection
            client.admin.command('ismaster')
            print('✅ Database connection healthy')
            
            # Check indexes
            databases = ['petpal_users', 'petpal_pets', 'petpal_appointments', 'petpal_medical']
            for db_name in databases:
                db = client[db_name]
                collections = db.list_collection_names()
                print(f'📊 Database {db_name}: {len(collections)} collections')
                
                # Check recent activity (if applicable)
                for collection_name in collections[:3]:  # Check first 3 collections
                    collection = db[collection_name]
                    try:
                        recent_count = collection.count_documents({
                            'createdAt': {'$gte': datetime.now() - timedelta(hours=24)}
                        })
                        print(f'   📈 {collection_name}: {recent_count} recent documents')
                    except:
                        print(f'   ℹ️  {collection_name}: count check skipped')
            
            print('✅ Database health check completed successfully')
            
        except Exception as e:
            print(f'❌ Database health check failed: {e}')
            exit(1)
        finally:
            client.close()
        "
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI_PRODUCTION }}

  notify:
    needs: [deploy-production, e2e-tests, database-health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.database-health-check.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Production deployment successful, E2E tests passed, and database is healthy" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Production deployment failed" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.database-health-check.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=⚠️ Production deployed but database health check failed" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=⚠️ Production deployed but E2E tests failed" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        else
          echo "status=cancelled" >> $GITHUB_OUTPUT
          echo "message=⏸️ Deployment pipeline was cancelled" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        fi
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            channel: '#deployments',
            username: 'PetPal CI/CD',
            icon_emoji: ':dog:',
            attachments: [{
              color: '${{ steps.status.outputs.color }}',
              fields: [{
                title: 'PetPal Deployment Status',
                value: '${{ steps.status.outputs.message }}',
                short: false
              }, {
                title: 'Repository',
                value: '${{ github.repository }}',
                short: true
              }, {
                title: 'Branch',
                value: '${{ github.ref_name }}',
                short: true
              }, {
                title: 'Commit',
                value: '<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>',
                short: true
              }, {
                title: 'Action',
                value: '<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>',
                short: true
              }, {
                title: 'Deployment Time',
                value: '${{ github.event.head_commit.timestamp }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
